function prototypes = k_means(data, k)
%     scatter(data(:,1), data(:,2))
    
    % random order of all indices
    indices = randperm(size(data,1));
    % take first k indices of data as initial prototypes
    prototypes = data(indices(1:k),:);
    % add column to data to store class
    data = [data zeros(size(data,1),1)];
    
    has_changed = 1;
    while has_changed
        has_changed = 0;
        
        % assign all data points to their nearest prototype
        for i = 1:size(data,1)
            % find nearest prototype
            [val, nearest_prototype] = min(pdist2(prototypes, data(i,1:2)));
            if data(i,3) ~= nearest_prototype
                % if prototype is new, update it and set 'has_changed'
                data(i,3) = nearest_prototype;
                has_changed = 1;
            end
        end
        
        % update prototypes as the mean of their clusters
        for i = 1:size(prototypes,1)
            for j = 1:k
                new_prototype = mean(data(data(:,2)==j,1:2));
                if prototypes(j) ~= new_prototype:
                en
            end
        end
        
    end
    
end

function new_data = transform_data(data)
    new_data = [data zeros(size(data,1),1)];
end